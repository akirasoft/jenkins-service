@Library('dynatrace@master') _

pipeline {
  parameters {
    string(name: 'GITHUBORG', defaultValue: '', description: 'The name of the GitHub organization.', trim: true)
    string(name: 'PROJECT', defaultValue: '', description: 'The name of the entire project.', trim: true)
    string(name: 'STAGE', defaultValue: '', description: 'The stage to deploy the service to.', trim: true)
    string(name: 'SERVICE', defaultValue: '', description: 'The name of the service to deploy.', trim: true)
    string(name: 'IMAGE', defaultValue: '', description: 'The image of the new service.', trim: true)
    string(name: 'TAG', defaultValue: '', description: 'The tag of the new service.', trim: true)
  }
  agent {
    label 'kubegit'
  }
  stages {
    stage('Run health check') {
      steps {
        container('jmeter') {
          script {
            def status = executeJMeter ( 
              scriptName: 'jmeter/basiccheck.jmx', 
              resultsDir: "HealthCheck_${env.SERVICE}",
              serverUrl: "${env.SERVICE}.${env.STAGE}", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 1,
              LTN: "HealthCheck_${BUILD_NUMBER}",
              funcValidation: true,
              avgRtValidation: 0
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Health check in dev failed."
            }
          }
        }
      }
    }
    stage('Run functional check') {
      steps {
        container('jmeter') {
          script {
            def status = executeJMeter (
              scriptName: "jmeter/${env.SERVICE}_load.jmx", 
              resultsDir: "FuncCheck_${env.SERVICE}",
              serverUrl: "${env.SERVICE}.${env.STAGE}", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 1,
              LTN: "FuncCheck_${BUILD_NUMBER}",
              funcValidation: true,
              avgRtValidation: 0
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Functional check failed."
            }
          }
        }
      }
    }
  }
  post {
    always {
      container("curl") {
        sendCloudEvent(
          receiver: 'event-broker.keptn.svc.cluster.local/keptn',
          type: 'sh.keptn.events.tests-finished',
          source: 'Jenkins', 
          data: [
            [key: 'gitHubOrg', value: "${env.GITHUBORG}"],
            [key: 'project', value: "${env.PROJECT}"],
            [key: 'stage', value: "${env.STAGE}"],
            [key: 'service', value: "${env.SERVICE}"],
            [key: 'image', value: "${env.IMAGE}"],
            [key: 'tag', value: "${env.TAG}"]
          ]
        )
      }
    }
  }
}
