@Library('dynatrace@master') _


def IMAGE_TAG = 'UNKNOWN'
def PULL_REQUEST = 'UNKNOWN'
def STABLE_TAG = 'UNKNOWN'

pipeline {
  parameters {
    string(name: 'GITHUBORG', defaultValue: '', description: 'The name of the GitHub organization.', trim: true)
    string(name: 'PROJECT', defaultValue: '', description: 'The name of the entire project.', trim: true)
    string(name: 'TESTSTRATEGY', defaultValue: '', description: 'The test strategy for this stage.', trim: true)
    string(name: 'DEPLOYMENTSTRATEGY', defaultValue: '', description: 'The deployment strategy for this stage.', trim: true)
    string(name: 'STAGE', defaultValue: '', description: 'The stage to deploy the service to.', trim: true)
    string(name: 'SERVICE', defaultValue: '', description: 'The name of the service to deploy.', trim: true)
    string(name: 'IMAGE', defaultValue: '', description: 'The image of the new service.', trim: true)
    string(name: 'TAG', defaultValue: '', description: 'The tag of the new service.', trim: true)
  }
  agent {
    label 'kubegit'
  }
  stages {
    stage('Evaluate test') {
      steps {
        perfSigDynatraceReports(
          envId: 'Dynatrace Tenant', 
          nonFunctionalFailure: 1, 
          specFile: "monspec/e2e_perfsig.json"
        )
      }
    }
    stage('Get artifact ID and promote deployment as passed') {
      steps {
        container('yq') {
          sh "cd keptn-config/helm-chart && yq r values.yaml ${env.SERVICE}Green.image.tag > image-tag.txt"
          sh "cd keptn-config/helm-chart && yq r values.yaml ${env.SERVICE}Green.image.repository > image-repository.txt"
          script {
            IMAGE_REPOSITORY = readFile('keptn-config/helm-chart/image-repository.txt').trim().toLowerCase()
            IMAGE_TAG = readFile('keptn-config/helm-chart/image-tag.txt').trim()
            PULL_REQUEST = IMAGE_REPOSITORY + ':' + IMAGE_TAG
            STABLE_TAG = IMAGE_REPOSITORY + ':staging-stable'
          }   
        }
        container('docker'){
          sh "echo ${IMAGE_TAG}"
          sh "echo ${STABLE_TAG}"
          sh "docker pull ${IMAGE_REPOSITORY}:${IMAGE_TAG}"
          sh "docker tag ${IMAGE_REPOSITORY}:${IMAGE_TAG} ${STABLE_TAG}"
          sh "docker push ${STABLE_TAG}"
        }
      }
    }
  }
  post {
    always {
      container("curl") {
        sendCloudEvent(
          receiver: 'event-broker.keptn.svc.cluster.local/keptn',
          type: 'sh.keptn.events.new-artefact',
          source: 'Jenkins', 
          data: [
            [key: 'githuborg', value: "${env.GITHUBORG}"],
            [key: 'project', value: "${env.PROJECT}"],
            [key: 'teststategy', value: "${env.TESTSTRATEGY}"],
            [key: 'deploymentstrategy', value: "${env.DEPLOYMENTSTRATEGY}"],
            [key: 'stage', value: "${env.STAGE}"],
            [key: 'service', value: "${env.SERVICE}"],
            [key: 'image', value: "${env.IMAGE}"],
            [key: 'tag', value: "${env.TAG}"]
          ]
        )
      }
    }
  }
}
