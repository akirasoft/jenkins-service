@Library('dynatrace@master') _

def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [context: 'CONTEXTLESS', key: 'service', value: ''],
      [context: 'CONTEXTLESS', key: 'app', value: ''],
      [context: 'CONTEXTLESS', key: 'environment', value: '']
    ]
  ]
]

def IMAGE_TAG = 'UNKNOWN'
def PULL_REQUEST = 'UNKNOWN'
def STABLE_TAG = 'UNKNOWN'

pipeline {
  parameters {
    string(name: 'SERVICE', defaultValue: '', description: 'The name of the service to deploy.', trim: true)
    string(name: 'PROJECT', defaultValue: '', description: 'The name of the entire project.', trim: true)
    string(name: 'STAGE', defaultValue: '', description: 'The stage to deploy the service to.', trim: true)
    string(name: 'GITHUB_ORG', defaultValue: '', description: 'The name of the GitHub organization.', trim: true)
  }
  agent {
    label 'kubegit'
  }
  stages {
    stage('Check out Configuration') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
            sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
            sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUB_ORG}/${env.PROJECT}"
            sh "cd ${env.PROJECT} && git checkout ${env.STAGE} && ls"
          }
        }
      }
    }
    stage('Deploy Service') {
      steps {
        container('helm') {
          sh "helm init --client-only"
          sh "cd ${env.PROJECT} && helm dep update helm-chart/"
          sh "cd ${env.PROJECT} && helm upgrade --install ${env.SERVICE}-${env.STAGE} ./helm-chart --namespace ${env.STAGE}"
        }
      }
    }
    stage('DT Deploy Event') {
      steps {
        container("curl") {
          script {
            tagMatchRules[0].tags[0].value = "${env.SERVICE}"
            tagMatchRules[0].tags[1].value = "${env.PROJECT}"
            tagMatchRules[0].tags[2].value = "${env.STAGE}"
            def status = pushDynatraceDeploymentEvent (
              tagRule : tagMatchRules,
              customProperties : [
                [key: 'Jenkins Build Number', value: "${env.BUILD_ID}"],
              ]
            )
          }
        }
      }
    }
  }
  post {
    always {
      container("curl") {
        sh "curl -X POST event-broker.keptn.35.239.5.164.xip.io -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"status\\\": \\\"success\\\", \\\"environment\\\": \\\"${env.STAGE}\\\", \\\"service\\\": \\\"${env.SERVICE}\\\", \\\"github_org\\\": \\\"${env.GITHUB_ORG}\\\"}\" "       
      }
    }
  }
}
